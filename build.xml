<project name="jNeo" basedir="./" default="test">
  
  <property name="jarName"             value="build/target/jar/jNeo.jar"/>
  <property name="jarDir"             value="build/target/jar"/>
  <property name="jarTmpName"          value="build/target/jar/jNeoTmp.jar"/>
  <property name="releaseBuildDir"     value="build/target/classes"/>
  <property name="testBuildDir"        value="build/target/test"/>
  <property name="junitClassPath"      value="lib/junit.jar"/>

  <property name="TestVectorBuildDir" value="build/target/testgen/"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.args.jNeo" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>


  <!-- Conditionally set ${javaRT} based on the OS.
       On MacOS this is in a non-standard location.
       We need to supply this explicitly to proguard.
    -->
  <condition property="javaRT"
             value="${java.home}/../Classes/classes.jar"
             else="${java.home}/lib/rt.jar">
    <os family="mac"/>
  </condition>


  <!-- Delete all generated files and directories -->
  <target name="clean">
    <delete dir="build"/>
    <delete file="${jarName}"/>
    <delete file="${jarTmpName}"/>
    <delete file="TestVectors.txt"/>
    <delete> <fileset dir="." includes="**/TEST-*"/> </delete>
  </target>

  <taskdef resource="proguard/ant/task.properties" classpath="lib/proguard.jar" />

  <!-- Compile the classes that go into the jNeo.jar file. -->
  <target name="compile">
    <mkdir dir="${releaseBuildDir}"/>
    <javac srcdir="src/java/main"
           destdir="${releaseBuildDir}"
           debug="on"
           includesfile="include/jNeo.classes"
           includeantruntime="true" />
  </target>


  <!-- Build javadoc for all of the public classes in jNeo.jar -->
  <target name="doc" depends="compile">
    <javadoc  destdir="build/target/doc"
              defaultExcludes="yes"
              classpath="${releaseBuildDir}"
              Public="yes"
              Package="yes"
              Protected="yes"
              Private="yes"
              sourcefiles="com/securityinnovation/jNeo/OID.java,
                           com/securityinnovation/jNeo/Random.java,
                           com/securityinnovation/jNeo/ntruencrypt/NtruEncryptKey.java,
                           com/securityinnovation/jNeo/CiphertextBadLengthException.java,
                           com/securityinnovation/jNeo/DecryptionFailureException.java,
                           com/securityinnovation/jNeo/FormatNotSupportedException.java,
                           com/securityinnovation/jNeo/NoPrivateKeyException.java,
                           com/securityinnovation/jNeo/NtruException.java,
                           com/securityinnovation/jNeo/ObjectClosedException.java,
                           com/securityinnovation/jNeo/ParamSetNotSupportedException.java,
                           com/securityinnovation/jNeo/PlaintextBadLengthException.java"
              excludepackagenames="org.junit.*">
    </javadoc>
  </target>

  <!-- Build the jNeo.jar file. -->
  <target name="jar" depends="compile">
    <mkdir dir="lib"/>
    <!-- build the jar file -->
    <jar destfile="${jarTmpName}" basedir="${releaseBuildDir}">
      <manifest>
        <attribute name="Implementation-Vendor" value="Security Innovation"/>
        <attribute name="Implementation-Title" value="jNeo"/>
        <attribute name="Implementation-Version" value="1.0rc2"/>
        <attribute name="Main-Class" value="com.securityinnovation.jNeo.Main" />
      </manifest>
    </jar>
    <copy file="${jarTmpName}" tofile="${jarName}"/>
    <copy file="privKey.key" tofile="${jarDir}/privKey.key"/>
    <copy file="pubKey.key" tofile="${jarDir}/pubKey.key"/>
    <copy file="TestFilePlain.xml" tofile="${jarDir}/TestFilePlain.xml"/>
  </target>

  <!-- Compile the test classes (BBTest and Unit test) -->
  <target name="testcompile" depends="compile">
    <mkdir dir="${testBuildDir}"/>
    <javac srcdir="."
           destdir="${testBuildDir}"
           classpath="${junitClassPath}:${releaseBuildDir}"
           debug="on"
           includes="com/securityinnovation/jNeo/ntruencrypt/encoder/*TestCase.java,
                    com/securityinnovation/jNeo/digest/*TestCase.java,
                    com/securityinnovation/jNeo/math/*TestCase.java,
                    com/securityinnovation/jNeo/*TestCase.java,
                    com/securityinnovation/jNeo/inputstream/*TestCase.java,
                    com/securityinnovation/jNeo/ntruencrypt/*TestCase.java"
           includeantruntime="true"/>
  </target>

  <!-- Run the tests (BBTest and Unit test) against jNeo *.class files -->
  <target name="test" depends="jar,testcompile">
    <junit haltonerror="true">
       <classpath>
         <pathelement path="${junitClassPath}"/>
         <pathelement path="${releaseBuildDir}"/>
         <pathelement path="${testBuildDir}"/>
         <pathelement path="${java.class.path}"/>
       </classpath>
       <formatter type="plain"/>
       <batchtest>
         <fileset dir=".">
           <include name="com/securityinnovation/jNeo/ntruencrypt/encoder/*TestCase.java,
                    com/securityinnovation/jNeo/digest/*TestCase.java,
                    com/securityinnovation/jNeo/math/*TestCase.java,
                    com/securityinnovation/jNeo/*TestCase.java,
                    com/securityinnovation/jNeo/inputstream/*TestCase.java,
                    com/securityinnovation/jNeo/ntruencrypt/*TestCase.java"/>
         </fileset>
       </batchtest>
     </junit>
  </target>


  <!-- Run the BBTests against the release jar file -->
  <target name="bbtest" depends="jar,testcompile">
    <junit haltonerror="true">
       <classpath>
         <pathelement path="${junitClassPath}"/>
         <pathelement path="${jarName}"/>
         <pathelement path="${testBuildDir}"/>
         <pathelement path="${java.class.path}"/>
       </classpath>
       <formatter type="plain"/>
       <batchtest>
         <fileset dir=".">
           <include name="**/*BBTestCase.java"/>
         </fileset>
       </batchtest>
     </junit>
  </target>


  <!-- Build and run the sample code as part of the system test. -->
  <property name="sample.buildDir" value="build/target/sample"/>
  <property name="sample.classPath" value="${jarName}:${sample.buildDir}"/>
  <target name="sample" depends="jar">
    <mkdir dir="${sample.buildDir}"/>
    <javac srcdir="src/java/com/securityinnovation/jNeo/sample"
           destdir="${sample.buildDir}"
           classpath="${sample.classPath}"
           debug="on"
           includes="Sample.java,CompareFiles.java"/>

    <java classname="Sample"
          classpath="${sample.classPath}">
      <arg value="-setup"/>
      <arg value="ees401ep1"/>
    </java>

    <java classname="Sample"
          classpath="${sample.classPath}">
      <arg value="-encrypt"/>
      <arg value="build/target/sample/Sample.class"/>
      <arg value="build/target/sample/Sample.class.enc"/>
    </java>

    <java classname="Sample"
          classpath="${sample.classPath}">
      <arg value="-decrypt"/>
      <arg value="build/target/sample/Sample.class.enc"/>
      <arg value="build/target/sample/Sample.class.dec"/>
    </java>

    <java classname="CompareFiles"
          classpath="${sample.classPath}">
      <arg value="build/target/sample/Sample.class"/>
      <arg value="build/target/sample/Sample.class.dec"/>
    </java>

  </target>
                    

  <!-- Pull together data for packing a release -->
  <target name="package" depends="jar,doc">
    <delete dir="build/target/package/jNeo"/>
    <mkdir  dir="build/target/package/jNeo"/>

    <delete dir="build/target/package/doc"/>
    <mkdir  dir="build/target/package/doc"/>

    <copy  todir="build/target/package/jNeo/lib"     file="build/target/jar/jNeoTmp.jar"/>
    <copy  todir="build/target/package/jNeo/example"  file="src/java/main/com/securityinnovation/jNeo/Main.java"/>
    <copy  todir="build/target/package/jNeo/javadoc">
      <fileset dir="build/target/package/doc" includes="doc/*"/>
    </copy>
    <zip destfile="jNeo.zip" basedir="package"/>
  </target>


  <!-- Build code needed to create NtruEncrypt test vectors -->
  <target name="compile-testgen">
    <mkdir dir="${TestVectorBuildDir}"/>
    <javac srcdir="."
           destdir="${TestVectorBuildDir}"
           includesfile="include/jNeoTestVectorGenerator.classes"/>
  </target>

  <!-- Create NtruEncrypt test vectors -->
  <target name="testgen" depends="compile-testgen">
    <java classname="com.securityinnovation.testvectors.NtruEncryptTestVectorGenerator"
          classpath="${TestVectorBuildDir}"
          output="TestVectors.txt"/>
  </target>

</project>

